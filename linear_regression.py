# -*- coding: utf-8 -*-
"""linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FWl0FiRqea6-WdicTX1kiUYIvTxWqCLs
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder

data  = pd.read_csv('/content/heart_disease.csv')
print(df.head())

# Display data types of each column
print(df.dtypes)
print(df.columns)

label_encoder = LabelEncoder()
df['prevalentStroke'] = label_encoder.fit_transform(df['prevalentStroke'])

# Separate features and target variable
X = df.drop(columns=['Heart_ stroke'])
y = df['Heart_ stroke']

# Split the dataset into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Impute missing values with the mean
imputer = SimpleImputer(strategy='mean')
X_train_imputed = pd.DataFrame(imputer.fit_transform(X_train), columns=X_train.columns)
X_val_imputed = pd.DataFrame(imputer.transform(X_val), columns=X_val.columns)
X_test_imputed = pd.DataFrame(imputer.transform(X_test), columns=X_test.columns)

# Create a linear regression model
linear_reg = LinearRegression()

# Train the model on the combined training and validation sets
linear_reg.fit(pd.concat([X_train_imputed, X_val_imputed]), pd.concat([y_train, y_val]))

# Make predictions on the validation set
y_val_pred = linear_reg.predict(X_val_imputed)

# Make predictions on the test set
y_test_pred = linear_reg.predict(X_test_imputed)

# Calculate Mean Squared Error and R-squared for validation set
mse_val = mean_squared_error(y_val, y_val_pred)
r2_val = r2_score(y_val, y_val_pred)

print(f'Mean Squared Error on Validation Set: {1-mse_val}')
print(f'R-squared on Validation Set: {1-r2_val}')

# Calculate Mean Squared Error and R-squared for test set
mse_test = mean_squared_error(y_test, y_test_pred)
r2_test = r2_score(y_test, y_test_pred)

print(f'Mean Squared Error on Test Set: {1-mse_test}')
print(f'R-squared on Test Set: {1-r2_test}')

