# -*- coding: utf-8 -*-
"""logical_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGsG9O7VLAoUmcchXPlBTGyAL4NcicR7
"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder

url = "/content/heart_disease.csv"  # Replace with the actual URL or path to your dataset
data  = pd.read_csv(url)

# Handle missing values
data['glucose'] = pd.to_numeric(data['glucose'], errors='coerce')
imputer = SimpleImputer(strategy='mean')
data['glucose'] = imputer.fit_transform(data[['glucose']])

# Convert categorical variables using one-hot encoding
data = pd.get_dummies(data, columns=['Gender', 'education'], drop_first=True)

# Encode binary categorical variables
label_encoder = LabelEncoder()
data['prevalentStroke'] = label_encoder.fit_transform(data['prevalentStroke'])
data['Heart_ stroke'] = label_encoder.fit_transform(data['Heart_ stroke'])

# Select independent variables and the target variable
X = data.drop('Heart_ stroke', axis=1)
y = data['Heart_ stroke']

# Split the data into training, validation, and testing sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Standardize numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Handle missing values after scaling
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train_scaled)
X_val_imputed = imputer.transform(X_val_scaled)
X_test_imputed = imputer.transform(X_test_scaled)

# Initialize logistic regression model
logreg = LogisticRegression()

# Define hyperparameter grid for tuning
param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100]}

# Perform GridSearchCV for hyperparameter tuning
grid_search = GridSearchCV(logreg, param_grid, cv=5)
grid_search.fit(X_train_imputed, y_train)

# Get the best hyperparameters
best_params = grid_search.best_params_

# Initialize logistic regression model with best hyperparameters
best_logreg = LogisticRegression(C=best_params['C'])

# Train the model on the training set
best_logreg.fit(X_train_imputed, y_train)

# Make predictions on the validation set
y_val_pred = best_logreg.predict(X_val_imputed)

# Evaluate the model on the validation set
accuracy_val = accuracy_score(y_val, y_val_pred)
classification_report_val = classification_report(y_val, y_val_pred)

print(f'Best Hyperparameters: {best_params}')
print(f'Validation Accuracy: {accuracy_val}')
print('Validation Classification Report:\n', classification_report_val)

# Make predictions on the testing set
y_test_pred = best_logreg.predict(X_test_imputed)

# Evaluate the model on the testing set
accuracy_test = accuracy_score(y_test, y_test_pred)
classification_report_test = classification_report(y_test, y_test_pred)

print(f'Testing Accuracy: {accuracy_test}')
print('Testing Classification Report:\n', classification_report_test)